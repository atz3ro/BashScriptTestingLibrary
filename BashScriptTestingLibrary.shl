#!/bin/bash
# Written by Ryan Fritts - Questions, comments, and criticisms welcome.

PASSED_TESTS=0
FAILED_TESTS=0
TOTAL_TESTS=0

[[ $1 = "-v" ]] && VERBOSE_MODE="true" || VERBOSE_MODE="false"

# Assert Functions

# assertEquals callback function
equals() {
    declare -a callback_args=("${!1}")

    if [ "${callback_args[0]}" = "${callback_args[1]}" ] || [ "$(numericCompare "${callback_args[0]}" "${callback_args[1]}")" = "true" ]; then
        echo "true"
    else
        echo "false"
    fi
}

# Takes 2 arguments and asserts if they are equal to each other
function assertEquals () {
    local args=(
        "${1}"
        "${2}"
    )

    assert 2 equals args[@] "$#" "Expected \"$1\", but got \"$2\"." 
}

# assertNotSame callback function
notSame() {
    declare -a callback_args=("${!1}")

    if [ "${callback_args[0]}" != "${callback_args[1]}" ]; then
        echo "true"
    else
        echo "false"
    fi
}

# Takes 2 arguments and asserts if they are not equal to each other
function assertNotSame () {
    local args=(
        "${1}"
        "${2}"
    )

    assert 2 notSame args[@] "$#" "Expected not \"$1\", but got \"$2\"."
}

# assertNull callback function
null() {
    declare -a callback_args=("${!1}")

    if [ "${callback_args[0]}" = "" ]; then
        echo "true"
    else
        echo "false"
    fi
}

# Takes 1 argument and asserts if it is an empty string
function assertNull () {
    local args=(
        "${1}"
    )

    assert 1 null args[@] "$#" "Expected empty string, but got \"$1\"."
}

# assertTrue callback function
trueCb() {
    declare -a callback_args=("${!1}")
    eval [ ${callback_args[0]} ]
    testResult=$?

    if [ "$testResult" = "0" ]; then
        echo "true"
    else
        echo "false"
    fi
}

# Takes 1 argument and asserts if it evaluates as true
function assertTrue () {
    local args=(
        "${1}"
    )

    assert 1 trueCb args[@] "$#" "Boolean Expression [ $1 ] expected to evaluate as true, evaluated as false."
}

# assertFalse callback function
falseCb() {
    declare -a callback_args=("${!1}")
    eval [ ${callback_args[0]} ]
    testResult=$?

    if [ "$testResult" = "1" ]; then
        echo "true"
    else
        echo "false"
    fi
}

# Takes 1 argument and asserts if it evaluates as false
function assertFalse () {
    local args=(
        "${1}"
    )

    assert 1 falseCb args[@] "$#" "Boolean Expression [ $1 ] expected to evaluate as false, evaluated as true."
}

# assertNotNull callback function
notNull() {
    declare -a callback_args=("${!1}")

    if [ "${callback_args[0]}" != "" ]; then
        echo "true"
    else
        echo "false"
    fi
}

# Takes 1 argument and asserts if it is not an empty string
function assertNotNull () {
    local args=(
        "${1}"
    )

    assert 1 notNull args[@] "$#" "Expected not empty string, but got \"$1\"."
}

# assertContains callback function
contains() {
    declare -a callback_args=("${!1}")

    if [[ "${callback_args[1]}" == *"${callback_args[0]}"* ]]; then
        echo "true"
    else
        echo "false"
    fi
}

# Takes 2 arguments and asserts if argument 2 is a substring of argument 1
function assertContains () {
    local args=(
        "${1}"
        "${2}"
    )

    assert 2 contains args[@] "$#" "Expected \"$2\" to contain \"$1\"." 
}

# Main function used for assertions.
# Arguments:
#   The correct number of arguments for the assertion callback
#   The assertion callback function
#   An array of arguments to be passed to the assertion callback
#   The actual number of arguments being passed from the caller function
#   The assertion failure message
function assert () {
    local correct_num_of_args=${1}
    local callback=${2}
    local callback_args=${3}
    local actual_num_of_args=${4}
    local failure_msg=${5}

    local test_case_calling_assert=${FUNCNAME[2]}
    local assert_caller_func_name=${FUNCNAME[1]}
    local line=$(echo $(caller 1) | awk '{print $1}')

    if [ $(correctNumberOfArgs ${actual_num_of_args} ${correct_num_of_args}) = "true" ]; then
        local result=$(${callback} ${callback_args})

        if [ ${result} = "true" ]; then
            [[ "$VERBOSE_MODE" = "true" ]] && echo "Line ${line}: Passed - ${test_case_calling_assert}" 
            incrementPassedTests
        else
            echo "Line ${line}: ${test_case_calling_assert}: ${assert_caller_func_name}() failed. $failure_msg."
            incrementFailedTests
        fi
    else
        echo "Line $line: $test_case_calling_assert: ${assert_caller_func_name}() failed. Expected ${correct_num_of_args} argument(s)."
        incrementFailedTests
    fi
}

# Helper functions

function runUnitTests () {
    START_TIME=$(date +%s)
    testNames=$(grep "^function test" $0 | awk '{print $2}' | cut -f 1 -d "(")
    testNamesArray=($testNames)
    beginUnitTests
    for testCase in "${testNamesArray[@]}"
    do
        :
        $testCase
    done
    endUnitTests
    END_TIME=$(date +%s)
    echo "Execution completed in $(($END_TIME - $START_TIME)) second(s)..."
    echo ""

    if [ "$FAILED_TESTS" -gt "0" ]
    then
        echo "Unit Tests failed.  Exiting Status Code 1"
        exit 1
    fi
}

function beginUnitTests () {
    clear
    echo ""
    echo "$0:"
    echo ""
}

function endUnitTests () {

    if [ $FAILED_TESTS = 0 ] && [ $VERBOSE_MODE = "false" ]
        then
            echo "All unit tests passed."
    fi
    echo ""
    echo ""
    echo "RESULTS: $PASSED_TESTS tests passed.  $FAILED_TESTS tests failed.  $TOTAL_TESTS tests total."
}

function incrementPassedTests () {
    PASSED_TESTS=$(($PASSED_TESTS+1))
    incrementTotalTests
}

function incrementFailedTests () {
    FAILED_TESTS=$(($FAILED_TESTS+1))
    incrementTotalTests
}

function incrementTotalTests () {
    TOTAL_TESTS=$(($TOTAL_TESTS+1))
}

function correctNumberOfArgs () {
    if [ $1 = $2 ]
        then
            echo "true"
    else
        echo "false"
    fi
}

function numericCompare () {
    awk -v n1=$1 -v n2=$2 \ 'BEGIN { print (n1 == n2) ? "true" : "false" }' 2>/dev/null
}