#!/bin/bash

passed_tests=0
failed_tests=0
total_tests=0
VERBOSE_MODE="false"
NO_SCREEN_CLEAR="false"

function showHelp () {
    echo "Usage:"
    echo "  unitTestSuite.ut [options]"
    echo ""
    echo "Options"
    echo "  -v  verbose mode"
    echo "  -c  do not clear the screen before tests"
    echo "  -h  show this help"
    echo "  -V  show version"
    echo ""
}

function showVersion () {
    echo ""
    echo "BashScriptTestingLibrary: Version 1.0.0"
    echo ""
}

# Parse arguments

while getopts "h?vcV" opt; do
    case "$opt" in
    h|\?)
        showHelp
        exit 0
        ;;
    v)  VERBOSE_MODE="true"
        ;;
    c)  NO_SCREEN_CLEAR="true"
        ;;
    V)  showVersion
        ;;
    esac
done

# Assert Functions

function assertEquals () {
    local args=(
        "${1}"
        "${2}"
    )
    __assert 2 __equalsCallback args[@] "$#" "Expected \"$1\", but got \"$2\"."
}

function assertNotEquals () {
    local args=(
        "${1}"
        "${2}"
    )
    __assert 2 __notEqualsCallback args[@] "$#" "Expected not \"$1\", but got \"$2\"."
}

function assertNull () {
    local args=(
        "${1}"
    )
    __assert 1 __nullCallback args[@] "$#" "Expected empty string, but got \"$1\"."
}

function assertNotNull () {
    local args=(
        "${1}"
    )
    __assert 1 __notNullCallback args[@] "$#" "Expected not empty string, but got \"$1\"."
}

function assertTrue () {
    local args=(
        "${1}"
    )
    __assert 1 __trueCallback args[@] "$#" "Boolean Expression [ $1 ] expected to evaluate as true, evaluated as false."
}

function assertFalse () {
    local args=(
        "${1}"
    )
    __assert 1 __falseCallback args[@] "$#" "Boolean Expression [ $1 ] expected to evaluate as false, evaluated as true."
}

function assertContains () {
    local args=(
        "${1}"
        "${2}"
    )
    __assert 2 __containsCallback args[@] "$#" "Expected \"$2\" to contain \"$1\"."
}

# Main assert function, DONT CALL THIS DIRECTLY!
__assert () {
    local correct_num_of_args=${1}
    local callback_function=${2}
    local callback_args=${3}
    local actual_num_of_args=${4}
    local failure_msg=${5}

    local test_case_calling_assert=${FUNCNAME[2]}
    local assert_caller_func_name=${FUNCNAME[1]}
    local line=$(echo $(caller 1) | awk '{print $1}')

    if [ $(correctNumberOfArgs ${actual_num_of_args} ${correct_num_of_args}) = "true" ]; then
        local result=$(${callback_function} ${callback_args})

        if [ ${result} = "true" ]; then
            [[ "$VERBOSE_MODE" = "true" ]] && echo "Line ${line}: Passed - ${test_case_calling_assert}"
            incrementPassedTests
        else
            echo "Line ${line}: ${test_case_calling_assert}: ${assert_caller_func_name}() failed. $failure_msg"
            incrementFailedTests
        fi
    else
        echo "Line $line: $test_case_calling_assert: ${assert_caller_func_name}() failed. Expected ${correct_num_of_args} argument(s)."
        incrementFailedTests
    fi
}

# Callback functions - DONT CALL THESE DIRECTLY!

__equalsCallback() {
    declare -a callback_args=("${!1}")
    if [ "${callback_args[0]}" = "${callback_args[1]}" ] || [ "$(numericCompare "${callback_args[0]}" "${callback_args[1]}")" = "true" ]; then
        echo "true"
    else
        echo "false"
    fi
}

__notEqualsCallback() {
    declare -a callback_args=("${!1}")
    if [ "${callback_args[0]}" != "${callback_args[1]}" ]; then
        echo "true"
    else
        echo "false"
    fi
}

__nullCallback() {
    declare -a callback_args=("${!1}")
    if [ "${callback_args[0]}" = "" ]; then
        echo "true"
    else
        echo "false"
    fi
}

__notNullCallback() {
    declare -a callback_args=("${!1}")
    if [ "${callback_args[0]}" != "" ]; then
        echo "true"
    else
        echo "false"
    fi
}

__trueCallback() {
    declare -a callback_args=("${!1}")
    eval [ ${callback_args[0]} ]
    testResult=$?
    if [ "$testResult" = "0" ]; then
        echo "true"
    else
        echo "false"
    fi
}

__falseCallback() {
    declare -a callback_args=("${!1}")
    eval [ ${callback_args[0]} ]
    testResult=$?
    if [ "$testResult" = "1" ]; then
        echo "true"
    else
        echo "false"
    fi
}

__containsCallback() {
    declare -a callback_args=("${!1}")
    if [[ "${callback_args[1]}" == *"${callback_args[0]}"* ]]; then
        echo "true"
    else
        echo "false"
    fi
}

# Utility functions

function runUnitTests () {
    START_TIME=$(date +%s)
    test_names=$(grep -E '^(function )?test.*?\(' $0 | sed 's/^function //' | tr -d ' (){')
    test_names_array=($test_names)

    beginUnitTests
    for test_case in "${test_names_array[@]}"
    do
        :
        $test_case
    done
    endUnitTests

    END_TIME=$(date +%s)
    echo "Execution completed in $(($END_TIME - $START_TIME)) second(s)..."
    echo ""
    if [ "$failed_tests" -gt "0" ]; then
        echo "Unit Tests failed.  Exiting Status Code 1"
        exit 1
    fi
}

function beginUnitTests () {
    if [ $NO_SCREEN_CLEAR = "false" ]; then
        clear
    fi
    echo ""
    echo "$0:"
    echo ""
}

function endUnitTests () {

    if [ $failed_tests = 0 ] && [ $VERBOSE_MODE = "false" ]; then
        echo "All unit tests passed."
    fi
    echo ""
    echo ""
    echo "RESULTS: $passed_tests tests passed.  $failed_tests tests failed.  $total_tests tests total."
}

function incrementPassedTests () {
    passed_tests=$(($passed_tests+1))
    incrementTotalTests
}

function incrementFailedTests () {
    failed_tests=$(($failed_tests+1))
    incrementTotalTests
}

function incrementTotalTests () {
    total_tests=$(($total_tests+1))
}

function correctNumberOfArgs () {
    if [ $1 = $2 ]; then
        echo "true"
    else
        echo "false"
    fi
}

function numericCompare () {
    awk -v n1=$1 -v n2=$2 \ 'BEGIN { print (n1 == n2) ? "true" : "false" }' 2>/dev/null
}
